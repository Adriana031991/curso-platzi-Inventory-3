@using curso_platzi_Inventory_3.Shared.Entities

@inject ICategoryService CategoryService
@inject IProductService ProductService
@inject IWareHouseService WareHouseService
@inject IStorageService StorageService
@inject NavigationManager NavigationManager
@inject ILogger<ListProductsComponent> logger;

<EditForm Model="oStorage">

	<div class="form-group">
		<label>Bodega:</label>
		<InputSelect @bind-Value="oStorage.WarehouseId" class="form-control">
			<option>Seleccione una bodega...</option>
			@foreach (var warehouse in warehouses)
			{
				<option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
			}
		</InputSelect>
	</div>

	<div class="form-group">
		<label>Producto:</label>
		<InputSelect @bind-Value="oStorage.ProductId" class="form-control">
			<option>Seleccione un producto...</option>
			@foreach (var product in products)
			{
				<option value="@product.ProductId">@product.ProductName</option>
			}
		</InputSelect>
	</div>

	<div>
		<input type="button" value="Almacenar producto" @onclick="SaveStorage" />
	</div>
</EditForm>

<div class="text-center h1">
	@message
</div>
<div class="text-center h1">
	@message
	<p>aaaaaaaaaaaaaaaaaaaaaa</p>
</div>
<hr />



@code {
	StorageEntity oStorage = new StorageEntity();

	IEnumerable<WarehouseEntity> warehouses = new List<WarehouseEntity>();
	IEnumerable<ProductEntity> products = new List<ProductEntity>();

	string message;
	protected override async Task OnInitializedAsync()
	{
		await ProductService.GetProducts();
		products = ProductService.Products;
		await WareHouseService.GetWarehouses();
		warehouses = WareHouseService.WarehousesList;
	}

	private async void SaveStorage()
	{

		var productNameSelected = (from a in products where (a.ProductId == oStorage.ProductId) select a).FirstOrDefault().ProductName;
		Console.WriteLine("productNameSelected " + productNameSelected);
		var id = $"{oStorage.WarehouseId}-{oStorage.ProductId}";

		if (!string.IsNullOrEmpty(oStorage.WarehouseId) && !string.IsNullOrEmpty(oStorage.ProductId))

		{
			var res = await StorageService.IsProductInWarehouse(id);


			if (res.FirstOrDefault().Value.Equals(false))
			{

				oStorage.StorageId = id;
				//oStorage.StorageId = Guid.NewGuid().ToString();
				oStorage.LastUpdate = DateTime.Now;
				//oStorage.PartialQuantity = products.Where(a => a.ProductId == oStorage.ProductId).Select(a=>a).FirstOrDefault().TotalQuantity;
				oStorage.PartialQuantity = (from a in products where (a.ProductId == oStorage.ProductId) select a).FirstOrDefault().TotalQuantity;

				await StorageService.Save(oStorage);
				message = $"El producto {productNameSelected} se agregó {oStorage.Warehouse.WarehouseName}";
				Console.WriteLine("entra false  " + res.FirstOrDefault().Value + " -- " + message);
			}
			else
			{
				message = $"El producto {productNameSelected} ya se encuentra en a bodega {oStorage.Warehouse.WarehouseName}";
				Console.WriteLine("entra true  " + res.FirstOrDefault().Value + " -- " + message);
			}
		}
		else
		{
			message = $"El producto {productNameSelected} no pudo ser registrado";
		}
	}
}
}
