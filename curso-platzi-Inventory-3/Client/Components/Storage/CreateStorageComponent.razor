@using curso_platzi_Inventory_3.Shared.Entities

@inject ICategoryService CategoryService
@inject IProductService ProductService
@inject IWareHouseService WareHouseService
@inject IStorageService StorageService
@inject NavigationManager NavigationManager
@inject ILogger<ListProductsComponent> logger;

<EditForm Model="oStorage">

	<div class="form-group">
		<label>Bodega:</label>
		<InputSelect @bind-Value="oStorage.WarehouseId" class="form-control">
			<option>Seleccione una bodega...</option>
			@foreach (var warehouse in warehouses)
			{
				<option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
			}
		</InputSelect>
	</div>

	<div class="form-group">
		<label>Producto:</label>
		<InputSelect @bind-Value="oStorage.ProductId" class="form-control">
			<option>Seleccione un producto...</option>
			@foreach (var product in products)
			{
				<option value="@product.ProductId">@product.ProductName</option>
			}
		</InputSelect>
	</div>

	<div>
		<input type="button" value="Almacenar producto" @onclick="SaveStorage" />
	</div>
</EditForm>

<div class="text-center h4">
	@message
</div>



@code {
	StorageEntity oStorage = new StorageEntity();

	IEnumerable<WarehouseEntity> warehouses = new List<WarehouseEntity>();
	IEnumerable<ProductEntity> products = new List<ProductEntity>();

	string message;
	protected override async Task OnInitializedAsync()
	{
		await ProductService.GetProducts();
		products = ProductService.Products;
		await WareHouseService.GetWarehouses();
		warehouses = WareHouseService.WarehousesList;
	}

	private async void SaveStorage()
	{
		oStorage.StorageId = Guid.NewGuid().ToString();
		oStorage.LastUpdate = DateTime.Now;
		//oStorage.PartialQuantity = products.Where(a => a.ProductId == oStorage.ProductId).Select(a=>a).FirstOrDefault().TotalQuantity;
		oStorage.PartialQuantity = (from a in products where (a.ProductId == oStorage.ProductId) select a).FirstOrDefault().TotalQuantity;
		var res = await StorageService.IsProductInWarehouse(oStorage.StorageId);
		

		Console.WriteLine("warehouse  " + warehouses.Where(w => w.WarehouseId == oStorage.WarehouseId).FirstOrDefault().ToString());
		Console.WriteLine("storage  " +  oStorage.ToString());
		//Console.WriteLine("res " + res.Result.Values + "  -   " + res.FirstOrDefault().Value );
		Console.WriteLine("res " + res.FirstOrDefault().ToString() );
		
		if (res.FirstOrDefault().Value.Equals(true))
		{
			message = "producto registrado";
			Console.WriteLine("entra true  " + res.FirstOrDefault().Value);
			oStorage.LastUpdate = DateTime.Now;
			StorageService.Save(oStorage);
			//B_Storage.CreateStorage();
		}
		else
		{
			message = "producto existente";
			Console.WriteLine("entra false  " + res.FirstOrDefault().Value);
		}
	}
}
